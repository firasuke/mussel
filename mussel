#!/bin/sh

# Copyright © 2020-2025 Firas Khana
# Distributed under the terms of the ISC License

# Contributors:
# * Alexander Barris (AwlsomeAlex) <alex@awlsome.com>
# * Andrew Blue <andy@antareslinux.org>
# * ayb <ayb@3hg.fr>
# * Luiz Antônio Rangel at Pindorama (takusuman) <luiz.antonio.rangel@outlook.com.br>

set -e
# trap at line 658
umask 022

alias printf="printf --"

#---------------------------------------#
# ------------- Variables ------------- #
#---------------------------------------#

progname=$0

# ----- Optional ----- #
ISL_SUPPORT=yes
CXX_SUPPORT=yes
FORTRAN_SUPPORT=no
LINUX_HEADERS_SUPPORT=no
OPENMP_SUPPORT=no
PARALLEL_SUPPORT=no
PKG_CONFIG_SUPPORT=no
QUADMATH_SUPPORT=no
CUSTOM_VENDOR='(none)'

# ----- Colors ----- #
REDC='\033[1;31m'
GREENC='\033[1;32m'
YELLOWC='\033[1;33m'
BLUEC='\033[1;34m'
NORMALC='\033[0m'

# ----- Package Versions ----- #
binutils_ver=2.44
gcc_ver=14.2.0
gmp_ver=6.3.0
isl_ver=0.27
linux_ver=6.13.7
mpc_ver=1.3.1
mpfr_ver=4.2.2
musl_ver=1.2.5
pkgconf_ver=2.4.3

# ----- Package URLs ----- #
binutils_url=https://ftpmirror.gnu.org/binutils/binutils-$binutils_ver.tar.xz
gcc_url=https://ftpmirror.gnu.org/gcc/gcc-$gcc_ver/gcc-$gcc_ver.tar.xz
gmp_url=https://ftpmirror.gnu.org/gmp/gmp-$gmp_ver.tar.xz
isl_url=https://libisl.sourceforge.io/isl-$isl_ver.tar.xz
linux_url=https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$linux_ver.tar.xz
mpc_url=https://ftpmirror.gnu.org/mpc/mpc-$mpc_ver.tar.gz
mpfr_url=https://ftpmirror.gnu.org/mpfr/mpfr-$mpfr_ver.tar.xz
musl_url=https://musl.libc.org/releases/musl-$musl_ver.tar.gz
pkgconf_url=https://distfiles.ariadne.space/pkgconf/pkgconf-$pkgconf_ver.tar.xz

# Generic function to decide a command to be used.
decide_cmd() {
  for ccmd; do
    if (command -v $ccmd 1>&2 2>/dev/null); then
      # Return the decided command.
      printf '%s' "$ccmd"
      break
    else
      continue
    fi
  done
  return 0
}

# Decide which checksum command to use.
if [ -z "$checksum_command" ]; then
  checksum_command="$(decide_cmd b3sum openssl sha256sum)"
fi

# checksums
if [ "$checksum_command" = "b3sum" ]; then
  # ----- Package Checksums (b3sum) ----- #
  binutils_sum=85610ffef19cc45319ad23df13b1d8aaea394c42d9870aeb6b4dddcc4526be32
  gcc_sum=ffee29313fd417420454d985b6740be3755e6465e14173c420c02e3719a51539
  gmp_sum=fffe4996713928ae19331c8ef39129e46d3bf5b7182820656fd4639435cd83a4
  isl_sum=a419cf24561a34f81ec46d251b25d5aaccedbbf87ed2b96f3f0fb17a79a8c913
  linux_sum=9dda6ad3b457821eaafb890a1f9bbd179b9be33cadff7a6fd62befac7f794d2f
  mpc_sum=86d083c43c08e98d4470c006a01e0df727c8ff56ddd2956b170566ba8c9a46de
  mpfr_sum=11d59d061ef8db588650bc7dc5172594a6e5aad013994801c6f63011a62b191d
  musl_sum=63f96e526d3a73fddff8fcb9ee5c1dcbfdac8405db7d7537c3d1c8fffd5e6947
  pkgconf_sum=88a2b13f76c636d2d836eef7db1a9e4b40773f7f5f836e1bce46fceabca09aab
elif [ "$checksum_command" = "sha256sum" ] || [ "$checksum_command" = "openssl" ]; then
  # ----- Package Checksums (sha256sum) ----- #
  binutils_sum=ce2017e059d63e67ddb9240e9d4ec49c2893605035cd60e92ad53177f4377237
  gcc_sum=a7b39bc69cbf9e25826c5a60ab26477001f7c08d85cec04bc0e29cabed6f3cc9
  gmp_sum=a3c2b80201b89e68616f4ad30bc66aee4927c3ce50e33929ca819d5c43538898
  isl_sum=6d8babb59e7b672e8cb7870e874f3f7b813b6e00e6af3f8b04f7579965643d5c
  linux_sum=3a39b62038b7ac2f43d26a1f84b4283e197804e1e817ad637e9a3d874c47801d
  mpc_sum=ab642492f5cf882b74aa0cb730cd410a81edcdbec895183ce930e706c1c759b8
  mpfr_sum=b67ba0383ef7e8a8563734e2e889ef5ec3c3b898a01d00fa0a6869ad81c6ce01
  musl_sum=a9a118bbe84d8764da0ea0d28b3ab3fae8477fc7e4085d90102b8596fc7c75e4
  pkgconf_sum=51203d99ed573fa7344bf07ca626f10c7cc094e0846ac4aa0023bd0c83c25a41
fi

# ----- Check sha256 hash using openssl ----- #
# For a simple formality, I must say this code comes from Copacabana's
# build-system cmd/sha256sum.ksh implementation, but was heavly modified
# for POSIX shell compliance and for fitting this script.
osslchecksum() {
  err=0
  # If it's not passed via $1, read it from standard input using cat(1).
  hash_line="${1:-$(cat)}"
  # Split the line in two using the good ol' POSIX "regex", then use the
  # file name for recreating the hash using OpenSSL's shell/command line
  # API and treating its output with [n]awk(1).
  _file_to_check="${hash_line#* }"
  # And that's some POSIX "macumba" for getting around leading spaces
  # before the file name. Anyway.
  file_to_check="${_file_to_check#${_file_to_check%%[![:space:]]*}}"
  alleged_hash="${hash_line%% *}"
  actual_hash_line="$(openssl dgst -sha256 "$file_to_check" |
    awk '{ split($0, digest, "= ");
    sub(/.*[(]/, "", digest[1]);
    sub(/[)].*/, "", digest[1]);
    printf("%s %s\n", digest[2], digest[1]); }')"
  actual_fname="${actual_hash_line#* }"
  actual_hash="${actual_hash_line%% *}"
  if [ "x$alleged_hash" != "x$actual_hash" ]; then
    # "They said I came back Google Go-nized..."
    err=1
  fi
  unset hash_line _file_to_check file_to_check alleged_hash \
    actual_hash_line actual_fname actual_hash
  return $err
}

# ----- Checksum utility alias ----- #
# First of all, alias the command to be used with a generic
# boilerplate function.
# Since the shell, in any POSIX-compliant implementation, maintains
# function declarations in a stack different from variables, we can
# use 'checksum_command' as the identifier for both the variable
# that contains the type of hash check mechanism and the boilerplate
# function.
case "$checksum_command" in
  # check the hash with b3sum
  'b3sum') checksum_command() { b3sum -c; } ;;
  # check the hash with sha256sum
  'sha256sum') checksum_command() { sha256sum -c; } ;;
  # check the hash with openssl
  'openssl') checksum_command() { osslchecksum; } ;;
esac
checksum() {
  unset chksumna
  if [ -z "$1" ]; then
    # Is it true because we're not sure?
    export chksumna=true
    return 0
  fi
  printf '%s  %s' $1 "$2" | checksum_command
  return $?
}

# Stone-portable way to get the processor number of cores on
# UNIX-compatible systems, although we may only be using this on Linux.
getnproc() {
  (
    getconf _NPROCESSORS_ONLN ||
      ([ "$(uname -s)" = 'Linux' ] && printf '%d' $(grep -c 'processor' /proc/cpuinfo)) ||
      nproc ||
      printf '%d' 1
  ) 2>/dev/null
}

# Decide which download command to use.
if [ -z "$download_command" ]; then
  download_command="$(decide_cmd aria2c curl lynx w3m wget)"
fi

# If $download_command is still unset, we can't continue.
if [ -z "$download_command" ]; then
  printf '%b!!%b There'\''s no URL transfer utility installed at this system (searched at %s).\n' \
    "$REDC" "$NORMALC" "$PATH"
  printf '%b!.%b Go and get one of those, it'\''s free, gratis, buckshee:\n%s\n%s\n%s\n%s\n%s\n' \
    "$YELLOWC" "$NORMALC" \
    'https://aria2.github.io' 'https://curl.se' \
    'https://lynx.invisible-island.net' 'https://w3m.sourceforge.net' \
    'https://www.gnu.org/software/wget/ (C'\''mon, it'\''s better than nothing)'
  exit 1
fi

# ----- URL transfer utility alias ----- #
nettransfer() {
  url="$1"
  fname="${url##*/}"
  col=28

  # Moved to its own function for redundancy.
  nproc="$(getnproc)"

  [ "$download_command" = "aria2c" ] && {
    aria2c -o "$fname" -j $nproc -s $nproc --download-result=hide "$url"
  }
  # cURL, but with a progress bar and the file name.
  # Order and progress.
  [ "$download_command" = "curl" ] && {
    printf ' %-*s%s' $col "" "$fname" 1>&2
    COLUMNS=$col curl -o "$fname" -L -# "$url"
  }
  # A tribute for slackpkg folks
  [ "$download_command" = "lynx" ] && {
    printf '%b!.%b Using Lynx, there will be no progress bar or any indicator here.\n' "$YELLOWC" "$NORMALC"
    (lynx -source "$url") >"$fname"
  }
  [ "$download_command" = "w3m" ] && {
    printf '%b!.%b Using w3m, there will be no progress bar or any indicator here.\n' "$YELLOWC" "$NORMALC"
    (w3m -dump_source "$url") >"$fname"
  }
  [ "$download_command" = "wget" ] && {
    wget -q --show-progress "$url"
  }

  unset fname nproc url
}

# ----- Print help for command line arguments ----- #
help() {
  printf 'Run '\''%s -h'\'' for help.\n' $progname
  exit 1
}

# ----- Development Directories ----- #
CURDIR="$PWD"
SRCDIR="$CURDIR/sources"
BLDDIR="$CURDIR/builds"
PCHDIR="$CURDIR/patches"

MPREFIX="$CURDIR/toolchain"
MSYSROOT="$CURDIR/toolchain"

# ----- mussel Log File ---- #
MLOG="$CURDIR/log.txt"

# ----- PATH ----- #
PATH=$MPREFIX/bin:/usr/bin:/bin

# ----- Compiler Flags ----- #
CFLAGS=-O2
CXXFLAGS=-O2

# ----- mussel Flags ----- #
while [ $# -gt 0 ]; do
  case $1 in
    aarch64 | arm64 | armv8-a)
      XARCH=aarch64
      LARCH=arm64
      MARCH=$XARCH
      XGCCARGS="--with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
      XPURE64=$XARCH
      XTARGET=$XARCH-linux-musl
      ;;
    armv4 | armv4t)
      XARCH=armv4t
      LARCH=arm
      MARCH=$LARCH
      XGCCARGS="--with-arch=armv4t --with-float=soft"
      XPURE64=""
      XTARGET=$XARCH-linux-musleabi
      ;;
    armv5 | armv5te)
      XARCH=armv5te
      LARCH=arm
      MARCH=$LARCH
      XGCCARGS="--with-arch=armv5te --with-float=soft"
      XPURE64=""
      XTARGET=$XARCH-linux-musleabi
      ;;
    armv6)
      XARCH=armv6
      LARCH=arm
      MARCH=$LARCH
      XGCCARGS="--with-arch=$XARCH --with-fpu=vfp --with-float=hard"
      XPURE64=""
      XTARGET=$XARCH-linux-musleabihf
      ;;
    arm | armv6kz | armv6zk | bcm2835)
      XARCH=armv6kz
      LARCH=arm
      MARCH=$LARCH
      XGCCARGS="--with-arch=$XARCH --with-tune=arm1176jzf-s --with-abi=aapcs-linux --with-fpu=vfpv2 --with-float=hard"
      XPURE64=""
      XTARGET=$XARCH-linux-musleabihf
      ;;
    armv7 | armv7-a)
      XARCH=armv7-a
      LARCH=arm
      MARCH=$LARCH
      XGCCARGS="--with-arch=$XARCH --with-fpu=vfpv3 --with-float=hard"
      XPURE64=""
      XTARGET=$LARCH-linux-musleabihf
      ;;
    i486)
      XARCH=$1
      LARCH=i386
      MARCH=$LARCH
      XGCCARGS="--with-arch=$1 --with-tune=generic"
      XPURE64=""
      XTARGET=$1-linux-musl
      ;;
    i586)
      XARCH=$1
      LARCH=i386
      MARCH=$LARCH
      XGCCARGS="--with-arch=$1 --with-tune=generic"
      XPURE64=""
      XTARGET=$1-linux-musl
      ;;
    i386 | i686 | x86)
      XARCH=i686
      LARCH=i386
      MARCH=$LARCH
      XGCCARGS="--with-arch=$XARCH --with-tune=generic"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    m68k | 68000 | motorola)
      XARCH=m68k
      LARCH=$XARCH
      MARCH=$XARCH
      XGCCARGS=""
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    mblaze | microblaze | microblazebe | microblazeeb)
      XARCH=microblaze
      LARCH=$XARCH
      MARCH=$XARCH
      XGCCARGS="--with-endian=big"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    microblazeel | microblazele)
      XARCH=microblazeel
      LARCH=microblaze
      MARCH=$LARCH
      XGCCARGS="--with-endian=little"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    mips | mips32 | mips32r2)
      XARCH=$1
      LARCH=mips
      MARCH=${LARCH}
      XGCCARGS="--with-endian=big --with-arch=mips32r2 --with-abi=32 --with-float=soft"
      XPURE64=""
      XTARGET=$1-linux-musl
      ;;
    mipsel | mips32el | mips32r2el)
      XARCH=$1
      LARCH=mips
      MARCH=${LARCH}
      XGCCARGS="--with-endian=little --with-arch=mips32r2 --with-abi=32 --with-float=soft"
      XPURE64=""
      XTARGET=$1-linux-musl
      ;;
    mips64 | mips64be | mips64eb | mips64r2)
      XARCH=mips64
      LARCH=mips
      MARCH=$XARCH
      XGCCARGS="--with-endian=big --with-arch=${XARCH}r2 --with-abi=64 --with-float=hard"
      XPURE64=$XARCH
      XTARGET=$XARCH-linux-musl
      ;;
    loongson | loongson3 | mips64el | mips64le | mips64elr2 | mips64r2el)
      XARCH=mips64el
      LARCH=mips
      MARCH=${LARCH}64
      XGCCARGS="--with-endian=little --with-arch=${MARCH}r2 --with-abi=64 --with-float=hard"
      XPURE64=$MARCH
      XTARGET=$XARCH-linux-musl
      ;;
    mips64r6 | mipsisa64r6)
      XARCH=mipsisa64r6
      LARCH=mips
      MARCH=${LARCH}64
      XGCCARGS="--with-endian=big --with-arch=${MARCH}r6 --with-abi=64 --with-float=hard --with-nan=2008"
      XPURE64=$MARCH
      XTARGET=$XARCH-linux-musl
      ;;
    mips64r6el | mips64r6le | mipsisa64r6el)
      XARCH=mipsisa64r6el
      LARCH=mips
      MARCH=${LARCH}64
      XGCCARGS="--with-endian=little --with-arch=${MARCH}r6 --with-abi=64 --with-float=hard --with-nan=2008"
      XPURE64=$MARCH
      XTARGET=$XARCH-linux-musl
      ;;
    openrisc | or1k | or1ksim)
      XARCH=or1k
      LARCH=openrisc
      MARCH=$XARCH
      XGCCARGS=""
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    pmac32 | powerpc | ppc)
      XARCH=powerpc
      LARCH=$XARCH
      MARCH=$XARCH
      XGCCARGS="--with-cpu=$XARCH --enable-secureplt --without-long-double-128"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    powerpcle | powerpcel | ppcle | ppcel)
      XARCH=powerpcle
      LARCH=poweroc
      MARCH=powerpc
      XGCCARGS="--with-cpu=$LARCH --enable-secureplt --without-long-double-128 --with-endian=little"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    g5 | powerpc64 | powerpc64be | powerpc64eb | ppc64 | ppc64be | ppc64eb)
      XARCH=powerpc64
      LARCH=powerpc
      MARCH=$XARCH
      XGCCARGS="--with-cpu=$XARCH --with-abi=elfv2"
      XPURE64=$XARCH
      XTARGET=$XARCH-linux-musl
      ;;
    powernv | powerpc64le | ppc64le)
      XARCH=powerpc64le
      LARCH=powerpc
      MARCH=${LARCH}64
      XGCCARGS="--with-cpu=$XARCH --enable-secureplt --without-long-double-128 --with-abi=elfv2"
      XPURE64=$MARCH
      XTARGET=$XARCH-linux-musl
      ;;
    riscv | riscv64 | rv64gc | sifive)
      XARCH=riscv64
      LARCH=riscv
      MARCH=$XARCH
      XGCCARGS="--with-cpu=sifive-u74 --with-arch=rv64gc --with-tune=sifive-7-series --with-abi=lp64d"
      XPURE64=$XARCH
      XTARGET=$XARCH-linux-musl
      ;;
    s390 | s390x | z15 | z196)
      XARCH=s390x
      LARCH=s390
      MARCH=$XARCH
      XGCCARGS="--with-arch=z196 --with-tune=z15 --with-long-double-128"
      XPURE64=$XARCH
      XTARGET=$XARCH-linux-musl
      ;;
    sh2 | superh | sh2le | sh2el)
      XARCH=sh2
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS=""
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    sh2-fdpic | superh-fdpic | sh2le-fdpic | sh2el-fdpic)
      XARCH=sh2-fdpic
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS=""
      XPURE64="--enable-fdpic"
      XTARGET=sh2-linux-muslfdpic
      ;;
    sh2be | sh2eb)
      XARCH=sh2eb
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS="--with-endian=big"
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    sh2be-fdpic | sh2eb-fdpic)
      XARCH=sh2eb-fdpic
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS="--enable-fdpic --with-endian=big"
      XPURE64=""
      XTARGET=sh2eb-linux-muslfdpic
      ;;
    sh4 | superh4 | sh4le | sh4el)
      XARCH=sh4
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS=""
      XPURE64=""
      XTARGET=$XARCH-linux-musl
      ;;
    sh4be-fdpic | sh4eb-fdpic)
      XARCH=sh4eb
      LARCH=sh
      MARCH=$LARCH
      XGCCARGS="--with-endian=big"
      XPURE64=""
      XTARGET=$XARCH-linux-muslfdpic
      ;;
    amd64 | x86-64 | x86_64)
      XARCH=x86-64
      LARCH=x86_64
      MARCH=$LARCH
      XGCCARGS="--with-arch=$XARCH --with-tune=generic"
      XPURE64=$XARCH
      XTARGET=$LARCH-linux-musl
      ;;
    c | -c | --clean)
      printf "${BLUEC}..${NORMALC} Cleaning mussel...\n"
      rm -fr "$BLDDIR"
      rm -fr "$MPREFIX"
      rm -fr "$MSYSROOT"
      rm -f "$MLOG"
      printf "${GREENC}=>${NORMALC} mussel cleaned.\n"
      exit
      ;;
    h | -h | --help)
      printf 'Copyright © 2020-2025 Firas Khana\n'
      printf 'Distributed under the terms of the ISC License\n'
      printf '\n'
      printf 'mussel - The fastest musl libc cross compiler generator\n'
      printf '\n'
      printf "Usage: $0: (architecture) (flags)\n"
      printf "Usage: $0: (command)\n"
      printf '\n'
      printf 'Supported Architectures:\n'
      printf '\t+ aarch64\n'
      printf '\t+ armv4t\n'
      printf '\t+ armv5te\n'
      printf '\t+ armv6\n'
      printf '\t+ armv6kz (Raspberry Pi 1 Models A, B, B+, the Compute Module,'
      printf '\n\t          and the Raspberry Pi Zero)\n'
      printf '\t+ armv7\n'
      printf '\t+ i486\n'
      printf '\t+ i586\n'
      printf '\t+ i686\n'
      printf '\t+ m68k\n'
      printf '\t+ microblaze\n'
      printf '\t+ microblazeel\n'
      printf '\t+ mips\n'
      printf '\t+ mipsel\n'
      printf '\t+ mips64\n'
      printf '\t+ mips64el\n'
      printf '\t+ mipsisa64r6\n'
      printf '\t+ mipsisa64r6el\n'
      printf '\t+ or1k\n'
      printf '\t+ powerpc\n'
      printf '\t+ powerpcle\n'
      printf '\t+ powerpc64\n'
      printf '\t+ powerpc64le\n'
      printf '\t+ riscv64\n'
      printf '\t+ s390x\n'
      printf '\t+ sh2\n'
      printf '\t+ sh2be\n'
      printf '\t+ sh2-fdpic\n'
      printf '\t+ sh2be-fdpic\n'
      printf '\t+ sh4\n'
      printf '\t+ sh4be\n'
      printf '\t+ x86-64\n'
      printf '\n'
      printf 'Flags:\n'
      printf '\tf | -f | --enable-fortran      \tEnable optional Fortran support\n'
      printf '\tk | -k | --enable-pkg-config   \tEnable optional pkg-config support\n'
      printf '\tl | -l | --enable-linux-headers\tEnable optional Linux Headers support\n'
      printf '\to | -o | --enable-openmp       \tEnable optional OpenMP support\n'
      printf '\tp | -p | --parallel            \tUse all available cores on the host system\n'
      printf '\tq | -q | --enable-quadmath     \tEnable optional Quadruple-precision support\n'
      printf '\ts | -s | --min-size            \tOptimize for minimum size.\n'
      printf '\tx | -x | --disable-cxx         \tDisable optional C++ support\n'
      printf '\tg | -g | --disable-isl         \tDisable isl Library support (Graphite loop optimisations)\n'
      printf '\tT | -T | --custom-vendor       \tSets a custom vendor for tuple, requires architecture to be set before\n'
      printf '\n'
      printf 'Commands:\n'
      printf "\tc | -c | --clean               \tClean mussel's build environment\n"
      printf '\th | -h | --help                \tDisplay this help message\n'
      printf '\n'
      printf 'No penguins were harmed in the making of this script!\n'
      exit
      ;;
    f | -f | --enable-fortran)
      QUADMATH_SUPPORT=yes
      FORTRAN_SUPPORT=yes
      ;;
    k | -k | --enable-pkg-config)
      PKG_CONFIG_SUPPORT=yes
      ;;
    l | -l | --enable-linux-headers)
      LINUX_HEADERS_SUPPORT=yes
      ;;
    o | -o | --enable-openmp)
      OPENMP_SUPPORT=yes
      ;;
    p | -p | --parallel)
      PARALLEL_SUPPORT=yes
      ;;
    q | -q | --enable-quadmath)
      QUADMATH_SUPPORT=yes
      ;;
    s | -s | --min-size)
      CFLAGS=-Os
      CXXFLAGS=-Os
      ;;
    x | -x | --disable-cxx)
      CXX_SUPPORT=no
      ;;
    g | -g | --disable-isl)
      ISL_SUPPORT=no
      ;;
    T | -T | --custom-vendor)
      # Have the user defined the default tuple first?
      if [ -z $XTARGET ]; then
        printf '%b!!%b '\''%s'\'' requires that the target architecture is already specified.\n' \
          "$REDC" "$NORMALC" $1
        help
      fi
      # Set the vendor as the next argument to this flag.
      shift
      CUSTOM_VENDOR="$1"
      # This mechanism basically cuts the string whenever there is a space.
      # If it still equals the original, then it hasn't any spaces.
      # The same happens for the '-' character.
      if [ "x$CUSTOM_VENDOR" != "x${CUSTOM_VENDOR% *}" ] ||
        ([ "x$CUSTOM_VENDOR" != "x${CUSTOM_VENDOR#-}" ] ||
          [ "x$CUSTOM_VENDOR" != "x${CUSTOM_VENDOR%-}" ]); then
        printf '%b!!%b Illegal vendor '\''%s'\'': %s.\n' \
          "$REDC" "$NORMALC" "$CUSTOM_VENDOR" \
          'no spaces nor strings starting and/or terminated with '\''-'\'' are permitted'
        help
      fi
      OLD_XTARGET=$XTARGET
      # Cut the architecture out.
      _XARCH=${OLD_XTARGET%%-*}
      # And then the remainder whose name I don't know to specify.
      _XTARGET_REMAINDER=${OLD_XTARGET#*-}
      # So we can now build the new XTARGET.
      XTARGET="${_XARCH}-$CUSTOM_VENDOR-$_XTARGET_REMAINDER"
      unset OLD_XTARGET _XARCH _XTARGET_REMAINDER
      ;;
    *)
      printf "${REDC}!!${NORMALC} Unknown architecture or flag: $1\n"
      help
      ;;
  esac

  shift
done

if [ -z $XARCH ]; then
  printf "${REDC}!!${NORMALC} No Architecture Specified!\n"
  help
fi

# ----- Make Flags ----- #
MAKE_CMD="make INFO_DEPS= infodir= ac_cv_prog_lex_root=lex.yy MAKEINFO=true"
if [ $PARALLEL_SUPPORT = yes ]; then
  JOBS=$(getnproc)
  MAKE="$MAKE_CMD -j$JOBS"
else
  MAKE="$MAKE_CMD"
fi

################################################
# !!!!! DON'T CHANGE ANYTHING UNDER HERE !!!!! #
# !!!!! UNLESS YOU KNOW WHAT YOURE DOING !!!!! #
################################################

#---------------------------------#
# ---------- Functions ---------- #
#---------------------------------#

# ----- mpackage(): Preparation Function ----- #
mpackage() {
  cd "$SRCDIR"

  if [ ! -d "$1" ]; then
    mkdir "$1"
  else
    printf "${YELLOWC}!.${NORMALC} $1 source directory already exists, skipping...\n"
  fi

  cd "$1"

  HOLDER="${2##*/}"

  if [ ! -f "$HOLDER" ]; then
    printf "${BLUEC}..${NORMALC} Fetching ""$HOLDER""...\n"
    nettransfer "$2"
  else
    printf "${YELLOWC}!.${NORMALC} ""$HOLDER"" already exists, skipping...\n"
  fi

  printf "${BLUEC}..${NORMALC} Verifying ""$HOLDER""...\n"
  checksum "$3" "$HOLDER"
  if [ $? != 0 ]; then
    printf "${YELLOWC}!.${NORMALC} ""$HOLDER"" is corrupted, redownloading...\n" &&
      rm "$HOLDER" &&
      nettransfer "$2"
  else
    [ "x$chksumna" = 'xtrue' ] &&
      printf 'mpackage: Not verifying '\''%s'\'': checksum hash not available.\n' \
        "$HOLDER" >>"$MLOG"
  fi

  rm -fr "$1-$4"
  printf "${BLUEC}..${NORMALC} Unpacking $HOLDER...\n"
  tar xf "$HOLDER" -C .

  printf "${GREENC}=>${NORMALC} $HOLDER prepared.\n\n"
  printf "${HOLDER}: Ok\n" >>"$MLOG"
}

# ----- mpatch(): Patching ----- #
mpatch() {
  printf "${BLUEC}..${NORMALC} Applying ${4}.patch from $5 for ${2}...\n"

  cd "$SRCDIR/$2/$2-$3"
  patch -p"$1" -i "$PCHDIR/$2/$5/${4}.patch" >>"$MLOG" 2>&1
  printf "${GREENC}=>${NORMALC} $2 patched with ${4}!\n"
}

# ----- mclean(): Clean Directory ----- #
mclean() {
  if [ -d "$CURDIR/$1" ]; then
    printf "${BLUEC}..${NORMALC} Cleaning $1 directory...\n"
    rm -fr "$CURDIR/$1"
    mkdir "$CURDIR/$1"
    printf "${GREENC}=>${NORMALC} $1 cleaned.\n"
    printf "Cleaned $1.\n" >>"$MLOG"
  fi
}

# ----- fail(): To be called by trap ----- #
fail() {
  logfile="$1"
  # Check if it's properly done and if isn't a vulgar
  # error such as an flag erroneusly informed.
  if ! (grep '^End Time: .*$' "$logfile") &&
    [ -n "$XARCH" ]; then
    printf '%b!!%b Build failed!\n%b!.%b Last lines of the log file (%s):\n' \
      "$REDC" "$NORMALC" "$YELLOWC" "$NORMALC" "$logfile"
    tail "$logfile"
  fi
}
trap 'fail "$MLOG"' EXIT

#--------------------------------------#
# ---------- Execution Area ---------- #
#--------------------------------------#

printf '\n'
printf '+======================================================+\n'
printf '|  mussel - The fastest musl libc Toolchain Generator  |\n'
printf '+------------------------------------------------------+\n'
printf '|          Copyright © 2018-2025 Firas Khana           |\n'
printf '|    Distributed under the terms of the ISC License    |\n'
printf '+======================================================+\n'
printf '\n'
printf "Target Architecture:            $XARCH\n\n"
printf "Optional isl Library Support:   $ISL_SUPPORT\n"
printf "Optional C++ Support:           $CXX_SUPPORT\n"
printf "Optional Fortran Support:       $FORTRAN_SUPPORT\n"
printf "Optional Linux Headers Support: $LINUX_HEADERS_SUPPORT\n"
printf "Optional OpenMP Support:        $OPENMP_SUPPORT\n"
printf "Optional Parallel Support:      $PARALLEL_SUPPORT\n"
printf "Optional pkg-config Support:    $PKG_CONFIG_SUPPORT\n"
printf "Optional Quadmath Support:      $QUADMATH_SUPPORT\n"
printf "Optional custom vendor:         '$CUSTOM_VENDOR'\n\n"

[ ! -d "$SRCDIR" ] && printf "${BLUEC}..${NORMALC} Creating the sources directory...\n" && mkdir "$SRCDIR"
[ ! -d "$BLDDIR" ] && printf "${BLUEC}..${NORMALC} Creating the builds directory...\n" && mkdir "$BLDDIR"
[ ! -d "$PCHDIR" ] && printf "${BLUEC}..${NORMALC} Creating the patches directory...\n" && mkdir "$PCHDIR"
printf '\n'
rm -f "$MLOG"

# ----- Print Variables to mussel Log File ----- #
printf 'mussel Log File\n\n' >>"$MLOG"
printf "ISL_SUPPORT: $ISL_SUPPORT\nCXX_SUPPORT: $CXX_SUPPORT\nFORTRAN_SUPPORT: $FORTRAN_SUPPORT\nLINUX_HEADERS_SUPPORT: $LINUX_HEADERS_SUPPORT\nOPENMP_SUPPORT: $OPENMP_SUPPORT\nPARALLEL_SUPPORT: $PARALLEL_SUPPORT\nPKG_CONFIG_SUPPORT: $PKG_CONFIG_SUPPORT\nQUADMATH_SUPPORT: $QUADMATH_SUPPORT\n\n" >>"$MLOG"
printf "XARCH: $XARCH\nLARCH: $LARCH\nMARCH: $MARCH\nXTARGET: $XTARGET\nCUSTOM_VENDOR: $CUSTOM_VENDOR\n" >>"$MLOG"
printf "XGCCARGS: \"$XGCCARGS\"\n\n" >>"$MLOG"
printf "CFLAGS: \"$CFLAGS\"\nCXXFLAGS: \"$CXXFLAGS\"\n\n" >>"$MLOG"
printf "PATH: \"$PATH\"\nMAKE: \"$MAKE\"\n\n" >>"$MLOG"
printf "Host Kernel: \"$(uname -a)\"\nHost Info:\n$(cat /etc/*release)\n" >>"$MLOG"
printf "\nStart Time: $(date)\n\n" >>"$MLOG"

# if defined, c++ lang support is built in gcc
[ $CXX_SUPPORT = "yes" ] && ENABLE_CXX_YES="abcd"

# if defined, fortran lang support is built in gcc
[ $FORTRAN_SUPPORT = "yes" ] && ENABLE_FORTRAN_YES="abcd"

# ----- Prepare Packages ----- #
printf "-----\nprepare\n-----\n\n" >>"$MLOG"
mpackage binutils "$binutils_url" "$binutils_sum" $binutils_ver
mpackage gcc "$gcc_url" "$gcc_sum" $gcc_ver
mpackage gmp "$gmp_url" "$gmp_sum" $gmp_ver
[ $ISL_SUPPORT = "yes" ] && mpackage isl "$isl_url" "$isl_sum" $isl_ver

[ $LINUX_HEADERS_SUPPORT = yes ] && mpackage linux "$linux_url" "$linux_sum" $linux_ver

mpackage mpc "$mpc_url" "$mpc_sum" $mpc_ver
mpackage mpfr "$mpfr_url" "$mpfr_sum" $mpfr_ver
mpackage musl "$musl_url" "$musl_sum" $musl_ver

[ $PKG_CONFIG_SUPPORT = yes ] && mpackage pkgconf "$pkgconf_url" "$pkgconf_sum" $pkgconf_ver

# ----- Patch Packages ----- #
printf "\n-----\npatch\n-----\n\n" >>"$MLOG"
if [ ! -z $XPURE64 ]; then
  mpatch 0 gcc $gcc_ver "0001-pure64-for-$XPURE64" glaucus
fi
mpatch 1 musl $musl_ver "CVE-2025-26519" upstream

printf '\n'

# ----- Clean Directories ----- #
printf "\n-----\nclean\n-----\n\n" >>"$MLOG"
mclean builds
mclean toolchain
mclean sysroot

# set up dir structure
printf "-----\ndir structure\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Creating directory structure...\n"
mkdir -pv "$MSYSROOT" >>"$MLOG" 2>&1
cd "$MSYSROOT"
mkdir -pv \
  bin \
  lib \
  include \
  "$XTARGET/bin" >>"$MLOG" 2>&1
ln -sfv . usr >>"$MLOG" 2>&1
cd "$MSYSROOT/$XTARGET"
ln -sfv ../lib lib >>"$MLOG" 2>&1
ln -sfv ../include include >>"$MLOG" 2>&1

printf '\n'

# ----- Step 1: musl headers ----- #
printf "\n-----\n*1) musl headers\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Preparing musl headers...\n"
cd "$BLDDIR"
cp -ar "$SRCDIR/musl/musl-$musl_ver" musl
cd musl

printf "${BLUEC}..${NORMALC} Installing musl headers...\n"
$MAKE \
  ARCH="$MARCH" \
  prefix="" \
  DESTDIR="$MSYSROOT" \
  install-headers >>"$MLOG" 2>&1

printf "${GREENC}=>${NORMALC} musl headers finished.\n\n"

# ----- Step 2: cross-binutils ----- #
printf "\n-----\n*2) cross-binutils\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Preparing cross-binutils...\n"
cd "$BLDDIR"
mkdir cross-binutils
cd cross-binutils

printf "${BLUEC}..${NORMALC} Configuring cross-binutils...\n"
"$SRCDIR/binutils/binutils-$binutils_ver/configure" \
  --prefix="" \
  --exec-prefix="" \
  --sbindir=/bin \
  --libexecdir=/lib \
  --datarootdir=/_tmp \
  --target=$XTARGET \
  --disable-multilib \
  --enable-install-libiberty \
  --enable-plugins \
  --enable-deterministic-archives \
  --enable-new-dtags \
  --enable-relro \
  --disable-default-execstack \
  --enable-default-hash-style="sysv" \
  --enable-initfini-array \
  --disable-werror \
  --disable-nls \
  --disable-rpath \
  --with-pic \
  --with-mmap \
  --with-sysroot=/ \
  --with-build-sysroot=$MSYSROOT \
  --with-pkgversion="mussel" >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Building cross-binutils...\n"
$MAKE \
  all-binutils \
  all-gas \
  all-ld >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Installing cross-binutils...\n"
$MAKE \
  DESTDIR="$MSYSROOT" \
  install-strip-binutils \
  install-strip-gas \
  install-strip-ld >>"$MLOG" 2>&1

printf "${GREENC}=>${NORMALC} cross-binutils finished.\n\n"

# ----- Step 3: cross-gcc (compiler) ----- #
printf "\n-----\n*3) cross-gcc (compiler)\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Preparing cross-gcc (compiler)...\n"
cp -ar "$SRCDIR/gmp/gmp-$gmp_ver" "$SRCDIR/gcc/gcc-$gcc_ver/gmp"
cp -ar "$SRCDIR/mpfr/mpfr-$mpfr_ver" "$SRCDIR/gcc/gcc-$gcc_ver/mpfr"
cp -ar "$SRCDIR/mpc/mpc-$mpc_ver" "$SRCDIR/gcc/gcc-$gcc_ver/mpc"
[ $ISL_SUPPORT = "yes" ] &&
  cp -ar "$SRCDIR/isl/isl-$isl_ver" "$SRCDIR/gcc/gcc-$gcc_ver/isl"

cd "$BLDDIR"
mkdir cross-gcc
cd cross-gcc

printf "${BLUEC}..${NORMALC} Configuring cross-gcc (compiler)...\n"
"$SRCDIR/gcc/gcc-$gcc_ver/configure" \
  --prefix="" \
  --exec-prefix="" \
  --sbindir=/bin \
  --libexecdir=/lib \
  --datarootdir=/_tmp \
  --target=$XTARGET \
  --disable-bootstrap \
  --enable-checking=release \
  --disable-multilib \
  --disable-fixed-point \
  --enable-tls \
  --enable-languages=c${ENABLE_CXX_YES:+,c++}${ENABLE_FORTRAN_YES:+,fortran} \
  --disable-rpath \
  --disable-nls \
  --disable-gnu-indirect-function \
  --enable-initfini-array \
  --disable-gnu-unique-object \
  --disable-linker-build-id \
  --disable-libsanitizer \
  --disable-libssp \
  --enable-default-ssp \
  --enable-link-serialization=1 \
  --enable-host-pie \
  --enable-host-bind-now \
  --enable-default-pie \
  --disable-cet \
  --disable-werror \
  --disable-symvers \
  --disable-libstdcxx-pch \
  --enable-clocale=generic \
  --with-build-sysroot=$MSYSROOT \
  --with-sysroot=/ \
  --with-pkgversion="mussel" \
  --with-pic \
  --with-linker-hash-style="sysv" \
  $XGCCARGS >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Building cross-gcc (compiler)...\n"
mkdir -p "$MSYSROOT/usr/include"
$MAKE \
  all-gcc >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Building cross-gcc (libgcc-static)...\n"
CFLAGS='-pipe -g0 -O0' \
  CXXFLAGS='-pipe -g0 -O0' \
  LDFLAGS=-Wl,-s \
  $MAKE \
  enable_shared=no \
  all-target-libgcc >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Installing cross-gcc (compiler) and (libgcc-static)...\n"
$MAKE \
  DESTDIR="$MSYSROOT" \
  install-strip-gcc \
  install-strip-target-libgcc >>"$MLOG" 2>&1

printf "${GREENC}=>${NORMALC} cross-gcc (compiler) and (libgcc-static) finished.\n\n"

# ----- Step 4: musl ----- #
printf "\n-----\n*4) musl\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Preparing musl...\n"
cd "$BLDDIR/musl"

printf "${BLUEC}..${NORMALC} Configuring musl...\n"
ARCH=$MARCH \
  CC=$XTARGET-gcc \
  CROSS_COMPILE=$XTARGET- \
  LIBCC="$MPREFIX/lib/gcc/$XTARGET/$gcc_ver/libgcc.a" \
  ./configure \
  --host=$XTARGET \
  --prefix="" \
  --disable-wrapper >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Building musl...\n"
$MAKE \
  AR="$XTARGET-ar" \
  RANLIB="$XTARGET-ranlib" >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Installing musl...\n"
$MAKE \
  AR="$XTARGET-ar" \
  RANLIB="$XTARGET-ranlib" \
  DESTDIR="$MSYSROOT" \
  install-libs >>"$MLOG" 2>&1

rm -f "$MSYSROOT/lib/ld-musl-$MARCH.so.1"
cp -af "$MSYSROOT/usr/lib/libc.so" "$MSYSROOT/lib/ld-musl-$MARCH.so.1" >>"$MLOG" 2>&1

printf "${GREENC}=>${NORMALC} musl finished.\n\n"

# ----- Step 5: cross-gcc (libgcc-shared) ----- #
printf "\n-----\n*5) cross-gcc (libgcc-shared)\n-----\n\n" >>"$MLOG"
printf "${BLUEC}..${NORMALC} Preparing cross-gcc (libgcc-shared)...\n"
cd "$BLDDIR/cross-gcc"

$MAKE \
  -C "$XTARGET/libgcc" distclean >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Building cross-gcc (libgcc-shared)...\n"
$MAKE \
  enable_shared=yes \
  all-target-libgcc >>"$MLOG" 2>&1

printf "${BLUEC}..${NORMALC} Installing cross-gcc (libgcc-shared)...\n"
$MAKE \
  DESTDIR="$MSYSROOT" \
  install-strip-target-libgcc >>"$MLOG" 2>&1

printf "${GREENC}=>${NORMALC} cross-gcc (libgcc-shared) finished.\n\n"

# ----- [Optional C++ Support] Step 6: cross-gcc (libstdc++-v3) ----- #
if [ $CXX_SUPPORT = yes ]; then
  printf "\n-----\n*6) cross-gcc (libstdc++-v3)\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Building cross-gcc (libstdc++-v3)...\n"
  cd "$BLDDIR/cross-gcc"
  $MAKE \
    all-target-libstdc++-v3 >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing cross-gcc (libstdc++-v3)...\n"
  $MAKE \
    DESTDIR="$MSYSROOT" \
    install-strip-target-libstdc++-v3 >>"$MLOG" 2>&1

  printf "${GREENC}=>${NORMALC} cross-gcc (libstdc++v3) finished.\n\n"
fi

# ----- [Optional OpenMP Support] Step 7: cross-gcc (libgomp) ----- #
if [ $OPENMP_SUPPORT = yes ]; then
  printf "\n-----\n*7) cross-gcc (libgomp)\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Building cross-gcc (libgomp)...\n"
  $MAKE \
    all-target-libgomp >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing cross-gcc (libgomp)...\n"
  $MAKE \
    DESTDIR="$MSYSROOT" \
    install-strip-target-libgomp >>"$MLOG" 2>&1

  printf "${GREENC}=>${NORMALC} cross-gcc (libgomp) finished.\n\n"
fi

# ----- [Optional Quadmath Support] Step 8: cross-gcc (libquadmath) ----- #
if [ $QUADMATH_SUPPORT = yes ]; then
  printf "\n-----\n*8) cross-gcc (libquadmath)\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Building cross-gcc (libquadmath)...\n"
  cd "$BLDDIR/cross-gcc"
  $MAKE \
    all-target-libquadmath >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing cross-gcc (libquadmath)...\n"
  $MAKE \
    DESTDIR="$MSYSROOT" \
    install-strip-target-libquadmath >>"$MLOG" 2>&1

  printf "${GREENC}=>${NORMALC} cross-gcc (libquadmath) finished.\n\n"
fi

# ----- [Optional Fortran Support] Step 9: cross-gcc (libgfortran) ----- #
if [ $FORTRAN_SUPPORT = yes ]; then
  printf "\n-----\n*9) cross-gcc (libgfortran)\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Building cross-gcc (libgfortran)...\n"
  cd "$BLDDIR/cross-gcc"
  $MAKE \
    all-target-libgfortran >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing cross-gcc (libgfortran)...\n"
  $MAKE \
    DESTDIR="$MSYSROOT" \
    install-strip-target-libgfortran >>"$MLOG" 2>&1

  printf "${GREENC}=>${NORMALC} cross-gcc (libgfortran) finished.\n\n"
fi

# ----- [Optional Linux Headers Support] Step 10: linux headers ----- #
if [ $LINUX_HEADERS_SUPPORT = yes ]; then
  printf "\n-----\n*10) linux headers\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Preparing linux headers...\n"
  cd "$BLDDIR"
  mkdir linux

  cd "$SRCDIR/linux/linux-$linux_ver"

  $MAKE \
    ARCH="$LARCH" \
    mrproper >>"$MLOG" 2>&1

  $MAKE \
    O="$BLDDIR/linux" \
    ARCH=$LARCH \
    headers >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing linux headers...\n"
  find $BLDDIR/linux/usr/include ! -name '*.h' -type f -delete
  cp -af $BLDDIR/linux/usr/include $MSYSROOT/usr

  printf "${GREENC}=>${NORMALC} linux headers finished.\n\n"
fi

# ----- [Optional pkg-config Support] Step 11: pkgconf ----- #
if [ $PKG_CONFIG_SUPPORT = yes ]; then
  printf "\n-----\n*11) pkgconf\n-----\n\n" >>"$MLOG"
  printf "${BLUEC}..${NORMALC} Preparing pkgconf...\n"
  cd "$BLDDIR"
  mkdir pkgconf
  cd pkgconf

  printf "${BLUEC}..${NORMALC} Configuring pkgconf...\n"
  CFLAGS="$CFLAGS -fcommon" \
    "$SRCDIR/pkgconf/pkgconf-$pkgconf_ver/configure" \
    --prefix="$MPREFIX" \
    --enable-pic \
    --with-sysroot="$MSYSROOT" \
    --with-pkg-config-dir="$MSYSROOT/usr/lib/pkgconfig:$MSYSROOT/usr/share/pkgconfig" \
    --with-system-libdir="$MSYSROOT/usr/lib" \
    --with-system-includedir="$MSYSROOT/usr/include" >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Building pkgconf...\n"
  $MAKE >>"$MLOG" 2>&1

  printf "${BLUEC}..${NORMALC} Installing pkgconf...\n"
  $MAKE \
    install-strip >>"$MLOG" 2>&1

  ln -sv pkgconf "$MPREFIX/bin/pkg-config" >>"$MLOG" 2>&1
  ln -sv pkgconf "$MPREFIX/bin/$XTARGET-pkgconf" >>"$MLOG" 2>&1
  ln -sv pkgconf "$MPREFIX/bin/$XTARGET-pkg-config" >>"$MLOG" 2>&1

  printf "${GREENC}=>${NORMALC} pkgconf finished.\n\n"
fi

# remove temp dir
rm -rf "$MSYSROOT/_tmp" @ >>"$MLOG" >&1

# done!
printf "${GREENC}=>${NORMALC} Done! Enjoy your new ${XARCH} cross compiler targeting musl libc!\n"
printf "\nEnd Time: $(date)\n" >>"$MLOG" 2>&1
